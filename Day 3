Problem: Longest Happy String


Problem Description:

A string s is called happy if it satisfies the following conditions:
s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".
A substring is a contiguous sequence of characters within a string. 

Example 1:
Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.

Example 2:
Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It is the only correct answer in this case.

Approach:   In this problem, the string can contain only three characters. 
First, we count the frequency of each character and determine how many times it occurs.
After that, we push the data into a max-heap to extract the character with the highest 
frequency and add it to the ans variable. However, one important thing to remember is that no character can be 
repeated more than twice consecutively. Finally, we return the ans

Code:

class Solution {
public:
     
    string longestDiverseString(int a, int b, int c) {
        priority_queue<pair<int,char>>pq;

        if(a>0)pq.push({a,'a'});
        if(b>0)pq.push({b,'b'});
        if(c>0)pq.push({c,'c'});
        string ans= "";
        while(!pq.empty()){
            int currCnt = pq.top().first;
            char currChar = pq.top().second;

            pq.pop();

            if(ans.length()>=2 && ans[ans.length()-1]==currChar && ans[ans.length()-2] == currChar){

                if(pq.empty()){
                    break;
                }

                int nextCnt = pq.top().first;
                char nextChar = pq.top().second;
                pq.pop();
                ans.push_back(nextChar);
                nextCnt--;
                if(nextCnt>0){
                    pq.push({nextCnt,nextChar});
                }
            }else{
                ans.push_back(currChar);
                currCnt--;
            }
                if(currCnt>0)pq.push({currCnt,currChar});
        }
        return ans;
    }
};
