Problem:  Maximum Swap

Problem Description: 

You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.

Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.

Approach: 

In this problem, we first convert the number into a string because iterating over a string is easier.
Then, we create an array of size 10 and initialize it with -1. This array is used to store the index
of each element present in the string. we start looping from the end of the string. As we iterate, we 
check if an element is smaller than the one encountered later. If it is, we swap the elements. After that
we use the stoi function to convert the modified string back into a number. If the element is already the
maximum, we simply return the original value.

Code:

class Solution {
public:
    int maximumSwap(int num) {
          string s=to_string(num);
          int n=s.length();
          vector<int> dp(10,-1);
          for(int i=0;i<n;i++){
            int currIndex=s[i]-'0';
            dp[currIndex]=i;
          }

          for(int i=0;i<n;i++){
            char curr=s[i];
            int currElement=curr-'0';
            for(int num=9;num>currElement;num--){
                if(dp[num]>i){
                    swap(s[i],s[dp[num]]);
                    return stoi(s);
                }
            }
          }
          return num;
    }
};
