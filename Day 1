Problem:  Maximal Score After Applying K Operations


Problem Description:
You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.
In one operation:
choose an index i such that 0 <= i < nums.length,
increase your score by nums[i], and
replace nums[i] with ceil(nums[i] / 3).
Return the maximum possible score you can attain after applying exactly k operations.
The ceiling function ceil(val) is the least integer greater than or equal to val.

 
Example 1:
Input: nums = [10,10,10,10,10], k = 5
Output: 50
Explanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.

Example 2:
Input: nums = [1,10,3,3,3], k = 3
Output: 17

Approach:In this problem, we used the concept of a Max Heap. In the Max Heap, we store the elements, 
and then we repeatedly pop the maximum element from the top and store it in a variable. After that, 
we calculate the ceil value of the popped element. We repeat this process K times, and finally, we return the variable where we stored the answer.


Code: class Solution {
public:
    long long maxKelements(vector<int>& nums, int k) {
        long long sum=0;
        priority_queue<int> q(nums.begin(),nums.end());
       
        while(k--){
            int maxi=q.top();
            q.pop();
            sum+=maxi;
            int value=ceil(maxi/3.0);
            q.push(value);

        }
        return sum;
    }
};
